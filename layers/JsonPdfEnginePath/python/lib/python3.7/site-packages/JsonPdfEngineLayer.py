import asyncio
from os import walk
from os.path import join
from pathlib import Path
from pybars import Compiler
from json import load, dumps
from functools import lru_cache
#from weasyprint import HTML, CSS
#from weasyprint.fonts import FontConfiguration


HTML_CONF = {
    "ext": ".hbs",
    "layouts_dir": "/opt/layouts",
    "partials_dir": "/opt/components"
}

PDF_CONF = {
    "path": "/tmp/result.pdf",
    "printBackground": True,
    "format": "A4"
}

BROWSER = {
    'executablePath': 'headless-chromium',
    'args': ['--no-sandbox']
}

def files():
    for r, d, f in walk(HTML_CONF['partials_dir']):
        for file in f:
            if HTML_CONF['ext'] in file:
                yield join(r, file)


def file_read(file):
    with open(file) as f:
        return f.read()


def name(file): return Path(file).stem


def data_compile(file):
    data_source = file_read(file)
    return Compiler().compile(data_source)


@lru_cache(maxsize=128)
def partials_build():
    return {
        'partials': {name(file): data_compile(file) for file in files()}
    }


@lru_cache(maxsize=128)
def template_build(layout_name):
    file = join(HTML_CONF['layouts_dir'], layout_name + HTML_CONF['ext'])
    
    template = data_compile(file)
    partials = partials_build()
    
    return lambda data: template(data, **partials)


def pdf_build(html_source):
    # font_config = FontConfiguration()
    html = HTML(string=html)
    css = CSS(string='h1 { color: red }')
    html.write_pdf('/tmp/example.pdf', stylesheets=[css])
