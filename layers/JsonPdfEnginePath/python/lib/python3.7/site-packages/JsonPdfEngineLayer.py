import asyncio
from os import walk
from os.path import join
from pathlib import Path
from pybars import Compiler
from json import load, dumps
from functools import lru_cache
from fpdf import FPDF, HTMLMixin
from selenium import webdriver


HTML_CONF = {
    "ext": ".hbs",
    "layouts_dir": "/opt/layouts",
    "partials_dir": "/opt/components"
}


class HTML2PDF(FPDF, HTMLMixin):
    pass

def files():
    for r, d, f in walk(HTML_CONF['partials_dir']):
        for file in f:
            if HTML_CONF['ext'] in file:
                yield join(r, file)


def file_read(file):
    with open(file) as f:
        return f.read()


def name(file): return Path(file).stem


def data_compile(file):
    data_source = file_read(file)
    return Compiler().compile(data_source)


@lru_cache(maxsize=128)
def partials_build():
    return {
        'partials': {name(file): data_compile(file) for file in files()}
    }


@lru_cache(maxsize=128)
def template_build(layout_name):
    file = join(HTML_CONF['layouts_dir'], layout_name + HTML_CONF['ext'])
    
    template = data_compile(file)
    partials = partials_build()
    
    return lambda data: template(data, **partials)


def pdf_build(html_tmp):
    def execute(script, args):
        driver.execute(executable_path, {'script': script, 'args': args})

    executable_path = 'node_modules/phantomjs-prebuilt/lib/phantomjs.js'

    driver = webdriver.PhantomJS(executable_path='node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs', service_log_path='/tmp/ghostdriver.log')        
    driver.command_executor._commands[executable_path] = ('POST', '/session/$sessionId/phantom/execute')

    html = '<h1>Hello World. I love you!!</h1>'
    page_content = f'this.content = "{html_tmp}";'
    execute(page_content, [])
        
    page_format = 'this.paperSize = {format: "A4", orientation: "portrait" };'
    execute(page_format, [])

    render = '''this.render("{}")'''.format("/tmp/save_me.pdf")
    execute(render, [])

